/*EMPLOYEE MANAGEMENT SYSTEM*/

CREATE TABLE IF NOT EXISTS Employees (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone_number VARCHAR(15),
    hire_date DATE NOT NULL,
    job_id INT,
    department_id INT,
    salary DECIMAL(10, 2),
    FOREIGN KEY (job_id) REFERENCES JobPositions(job_id),
    FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);
CREATE TABLE IF NOT EXISTS Departments (
    department_id INT AUTO_INCREMENT PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL UNIQUE,
    location VARCHAR(100)
);
CREATE TABLE IF NOT EXISTS JobPositions (
    job_id INT AUTO_INCREMENT PRIMARY KEY,
    job_title VARCHAR(100) NOT NULL,
    min_salary DECIMAL(10, 2),
    max_salary DECIMAL(10, 2)
);
CREATE TABLE IF NOT EXISTS Salaries (
    salary_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT,
    salary_amount DECIMAL(10, 2) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE,
    FOREIGN KEY (employee_id) REFERENCES Employees(employee_id)
);
INSERT INTO Departments (department_name, location) VALUES
('Human Resources', 'New York'),
('Engineering', 'San Francisco'),
('Marketing', 'Chicago');
INSERT INTO JobPositions (job_title, min_salary, max_salary) VALUES
('Software Engineer', 60000, 120000),
('HR Manager', 50000, 100000),
('Marketing Specialist', 40000, 80000);
INSERT INTO Employees (first_name, last_name, email, phone_number, hire_date, job_id, department_id, salary) VALUES
('John', 'Doe', 'john.doe@example.com', '123-456-7890', '2020-01-15', 1, 2, 85000),
('Jane', 'Smith', 'jane.smith@example.com', '234-567-8901', '2019-03-20', 2, 1, 70000),
('Mark', 'Johnson', 'mark.johnson@example.com', '345-678-9012', '2021-06-10', 3, 3, 65000)
INSERT INTO Salaries (employee_id, salary_amount, start_date, end_date) VALUES
(1, 85000, '2020-01-15', NULL),
(2, 70000, '2019-03-20', NULL),
(3, 65000, '2021-06-10', NULL);
-- Retrieve all Employees with their Departments and Job Titles
SELECT 
    e.employee_id,
    e.first_name,
    e.last_name,
    e.email,
    d.department_name,
    jp.job_title,
    e.salary
FROM 
    Employees e
JOIN 
    Departments d ON e.department_id = d.department_id
JOIN 
    JobPositions jp ON e.job_id = jp.job_id;
--List all Departments with the Number of Employees
SELECT 
    d.department_name,
    COUNT(e.employee_id) AS num_employees
FROM 
    Departments d
LEFT JOIN 
    Employees e ON d.department_id = e.department_id
GROUP BY 
    d.department_name;
--Find the Highest Salary for Each Job Position
SELECT 
    jp.job_title,
    MAX(e.salary) AS highest_salary
FROM 
    Employees e
JOIN 
    JobPositions jp ON e.job_id = jp.job_id
GROUP BY 
    jp.job_title;
--Update Salary for an Employee
UPDATE Employees
SET salary = 90000
WHERE employee_id = 1;
--Delete an Employee Record
DELETE FROM Employees 
WHERE employee_id = 3;
